// <auto-generated />
using System;
using CoffeeShop.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop.Migrations
{
    [DbContext(typeof(CoffeeDbContext))]
    partial class CoffeeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShop.Entities.GroupBasket.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.HasKey("BasketId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupBasket.BasketItem", b =>
                {
                    b.Property<int>("BasketItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketItemId"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BasketItemId");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupItem.CoffeeItem", b =>
                {
                    b.Property<int>("CoffeeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoffeeItemId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUri")
                        .IsRequired()
                        .HasColumnType("varchar(265)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CoffeeItemId");

                    b.ToTable("CoffeeItems");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupOrder.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupOrder.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupUser.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AddressId");

                    b.HasIndex("BuyerId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupUser.Buyer", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuyerId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BuyerId");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupBasket.BasketItem", b =>
                {
                    b.HasOne("CoffeeShop.Entities.GroupBasket.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupItem.CoffeeItem", b =>
                {
                    b.OwnsOne("CoffeeShop.Entities.GroupItem.Availability", "Availability", b1 =>
                        {
                            b1.Property<int>("CoffeeItemId")
                                .HasColumnType("int");

                            b1.Property<bool>("InStock")
                                .HasColumnType("bit");

                            b1.Property<DateTime?>("NextBatchTime")
                                .HasColumnType("datetime");

                            b1.HasKey("CoffeeItemId");

                            b1.ToTable("CoffeeItems");

                            b1.WithOwner()
                                .HasForeignKey("CoffeeItemId");
                        });

                    b.OwnsOne("CoffeeShop.Entities.GroupItem.Customization", "Customization", b1 =>
                        {
                            b1.Property<int>("CoffeeItemId")
                                .HasColumnType("int");

                            b1.Property<string>("Choices")
                                .IsRequired()
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Option")
                                .IsRequired()
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("CoffeeItemId");

                            b1.ToTable("CoffeeItems");

                            b1.WithOwner()
                                .HasForeignKey("CoffeeItemId");
                        });

                    b.Navigation("Availability")
                        .IsRequired();

                    b.Navigation("Customization")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupOrder.Order", b =>
                {
                    b.OwnsOne("CoffeeShop.Entities.GroupOrder.OrderAddress", "ShipAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("CoffeeShop.Entities.GroupOrder.OrderStatus", "Status", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CompleteTime")
                                .HasColumnType("datetime");

                            b1.Property<DateTime>("LastUpdate")
                                .HasColumnType("datetime");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ShipAddress")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupOrder.OrderItem", b =>
                {
                    b.HasOne("CoffeeShop.Entities.GroupOrder.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CoffeeShop.Entities.GroupOrder.ItemOrdered", "Item", b1 =>
                        {
                            b1.Property<int>("OrderItemId")
                                .HasColumnType("int");

                            b1.Property<string>("Choices")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("CoffeeItemId")
                                .HasColumnType("int");

                            b1.Property<string>("ItemName")
                                .IsRequired()
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Option")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PictureUri")
                                .IsRequired()
                                .HasColumnType("nvarchar(265)");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("OrderItems");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("Item")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupUser.Address", b =>
                {
                    b.HasOne("CoffeeShop.Entities.GroupUser.Buyer", "Buyer")
                        .WithMany("Address")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupBasket.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupOrder.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CoffeeShop.Entities.GroupUser.Buyer", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
